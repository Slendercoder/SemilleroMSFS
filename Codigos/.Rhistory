df_ALL <- df_ALL[df_ALL$RegionGo != 'NOTHING', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'DOWN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'UP', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'LEFT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'RIGHT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'IN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'OUT', ]
head(df_ALL)
gALL2ALL <- ggplot() +
geom_point(aes(x = Score, y = Freqs), df_ALL, alpha = 0.4, size=1.5) +
#  scale_colour_manual(values = c("RS" = "#999999",
#                                 "ALL" = "#E69F00")) +
#  scale_shape_manual(values = c("RS" = 1,
#                                "ALL" = 2),
#                     name="Jumps to") +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
labs(color = "Source of data") +
xlab("Score") +
ylab("") +
#  ylab("Rel. Freq./Probability") +
ggtitle("Transition from ALL to ALL") +
theme_bw()
gALL2ALL
grid.arrange(gRS2RS, gRS2ALL, gALL2RS, gALL2ALL,
nrow = 2,
top="Model Recovery")
#xs <- seq(-128,32,length.out=161)
xs <- seq(min_score,32,length.out=(32-min_score + 1)*1000)
# Transition from RS to RS
# Model
fitTRUE <- sapply(xs, WSprob, i='RS', k='RS', theta=thetaTRUE, regiones=regiones)
# Model fitted from only absent
fitEST <- sapply(xs, WSprob, i='RS', k='RS', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitTRUE, fitEST)
head(dfmodels)
# Size of models' lines
tamanho <- 0.5
# Dummy plot to get legend
dummyplot <- ggplot() +
geom_line(aes(x = xs, y = fitTRUE, color="Original"), dfmodels, size = tamanho) +
geom_line(aes(x = xs, y = fitEST, color = "Recovered"), dfmodels, size = tamanho) +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
scale_color_manual(values=c("Original"="#F0E442",
"Recovered"="#009E73"),
name="Transition")  +
theme_bw() +
theme(legend.position="bottom")
legend2 <- get_legend(dummyplot)
gRS2RS <- gRS2RS +
geom_line(aes(x = xs, y = fitTRUE), dfmodels, size = tamanho, color="#F0E442") +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#009E73") +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw() +
theme(legend.position="none")
gRS2RS
# Transition from RS to ALL
# Model
fitTRUE <- sapply(xs, WSprob, i='RS', k='ALL', theta=thetaTRUE, regiones=regiones)
grid.arrange(gRS2RS, gRS2ALL, gALL2RS, gALL2ALL,
nrow = 2,
right=legend,
bottom=legend2,
top="Model of transitions")
gALL2ALL
df1 = read.csv("../Python Codes/humans.csv", na.strings=c("","NA"))
df1$Region <- df1$Category
df1 <- df1[complete.cases(df1), ]
df1 <- df1[c('Dyad', 'Player', 'Is_there', 'Region', 'Score', 'RegionGo')]
head(df1[, 3:6])
dfA <- df1[, 3:6]
dfA$Freqs <- apply(dfA, 1, function(x) {
i <- as.character(x[[2]][1])
s <- as.numeric(x[[3]][1])
k <- as.character(x[[4]][1])
#cat('\ni', i, 's', s, 'k', k)
return(getRelFreq(i, s, k, df1))
})
dfA <- unique(dfA)
dfA <- dfA[complete.cases(dfA), ]
head(dfA)
df <- dfA
beep()
#min_score = -50
min_score = 0
df_RS <- df[df$Region == 'RS', ]
head(df_RS)
gRS <- ggplot() +
geom_point(aes(x = Score, y = Freqs, color=RegionGo), df_RS, alpha = 0.4, size=1.5) +
scale_x_continuous(limits = c(min_score, 35)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transitions from RS") +
theme_bw()
gRS
df_RS <- df[df$Region == 'RS', ]
df_RS <- df_RS[df_RS$RegionGo != 'ALL', ]
df_RS <- df_RS[df_RS$RegionGo != 'NOTHING', ]
df_RS <- df_RS[df_RS$RegionGo != 'DOWN', ]
df_RS <- df_RS[df_RS$RegionGo != 'UP', ]
df_RS <- df_RS[df_RS$RegionGo != 'LEFT', ]
df_RS <- df_RS[df_RS$RegionGo != 'RIGHT', ]
df_RS <- df_RS[df_RS$RegionGo != 'IN', ]
df_RS <- df_RS[df_RS$RegionGo != 'OUT', ]
head(df_RS)
gRS2RS <- ggplot() +
geom_point(aes(x = Score, y = Freqs), df_RS, alpha = 0.4, size=1.5) +
scale_x_continuous(limits = c(min_score, 35)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transition from RS to RS") +
theme_bw()
gRS2RS
df_RS <- df[df$Region == 'RS', ]
df_RS <- df_RS[df_RS$RegionGo != 'RS', ]
df_RS <- df_RS[df_RS$RegionGo != 'NOTHING', ]
df_RS <- df_RS[df_RS$RegionGo != 'DOWN', ]
df_RS <- df_RS[df_RS$RegionGo != 'UP', ]
df_RS <- df_RS[df_RS$RegionGo != 'LEFT', ]
df_RS <- df_RS[df_RS$RegionGo != 'RIGHT', ]
df_RS <- df_RS[df_RS$RegionGo != 'IN', ]
df_RS <- df_RS[df_RS$RegionGo != 'OUT', ]
head(df_RS)
gRS2ALL <- ggplot() +
geom_point(aes(x = Score, y = Freqs), df_RS, alpha = 0.4, size=1.5) +
scale_x_continuous(limits = c(min_score, 35)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
ylab("") +
#  ylab("Rel. Freq./Probability") +
ggtitle("Transition from RS to ALL") +
theme_bw()
gRS2ALL
df_ALL <- df[df$Region == 'ALL', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'ALL', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'NOTHING', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'DOWN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'UP', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'LEFT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'RIGHT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'IN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'OUT', ]
head(df_ALL)
gALL2RS <- ggplot() +
geom_point(aes(x = Score, y = Freqs), df_ALL, alpha = 0.4, size=1.5) +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
#  ylab("") +
ylab("Rel. Freq./Probability") +
ggtitle("Transition from ALL to RS") +
theme_bw()
gALL2RS
df_ALL <- df[df$Region == 'ALL', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'RS', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'NOTHING', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'DOWN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'UP', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'LEFT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'RIGHT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'IN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'OUT', ]
head(df_ALL)
gALL2ALL <- ggplot() +
geom_point(aes(x = Score, y = Freqs), df_ALL, alpha = 0.4, size=1.5) +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
ylab("") +
#  ylab("Rel. Freq./Probability") +
ggtitle("Transition from ALL to ALL") +
theme_bw()
gALL2ALL
grid.arrange(gRS2RS, gRS2ALL, gALL2RS, gALL2ALL,
nrow = 2,
top="Human data")
df_ALL <- df[df$Region == 'ALL', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'RS', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'NOTHING', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'DOWN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'UP', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'LEFT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'RIGHT', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'IN', ]
df_ALL <- df_ALL[df_ALL$RegionGo != 'OUT', ]
head(df_ALL)
gNOTHING2NOTHING <- ggplot() +
geom_point(aes(x = Score, y = Freqs), df_ALL, alpha = 0.4, size=1.5) +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
xlab("Score") +
ylab("") +
#  ylab("Rel. Freq./Probability") +
ggtitle("Transition from ALL to ALL") +
theme_bw()
gNOTHING2NOTHING
#xs <- seq(-128,32,length.out=161)
xs <- seq(min_score,32,length.out=(32-min_score + 1)*1000)
# Transition from RS to RS
# Model fitted
fitEST <- sapply(xs, WSprob, i='RS', k='RS', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
# Size of models' lines
tamanho <- 0.5
# Dummy plot to get legend
dummyplot <- ggplot() +
geom_line(aes(x = xs, y = fitEST, color = "WSLS"), dfmodels, size = tamanho) +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
scale_color_manual(values=c("WSLS"="#E69F00",
"Recovered"="#009E73"),
name="Transition")  +
theme_bw() +
theme(legend.position="bottom")
legend2 <- get_legend(dummyplot)
gRS2RS <- gRS2RS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#E69F00") +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw() +
theme(legend.position="none")
gRS2RS
# Transition from RS to ALL
# Model fitted
fitEST <- sapply(xs, WSprob, i='RS', k='ALL', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
gRS2ALL <- gRS2ALL +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#E69F00") +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw() +
theme(legend.position="none")
gRS2ALL
# Transition from ALL to RS
# Model fitted
fitEST <- sapply(xs, WSprob, i='ALL', k='RS', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
gALL2RS <- gALL2RS +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#E69F00") +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw() +
theme(legend.position="none")
gALL2RS
# Transition from ALL to ALL
# Model fitted
fitEST <- sapply(xs, WSprob, i='ALL', k='ALL', theta=theta, regiones=regiones)
dfmodels <- data.frame(xs, fitEST)
head(dfmodels)
gALL2ALL <- gALL2ALL +
geom_line(aes(x = xs, y = fitEST), dfmodels, size = tamanho, color="#E69F00") +
scale_x_continuous(limits = c(min_score, 33)) +
scale_y_continuous(limits = c(0, 1.01)) +
theme_bw() +
theme(legend.position="none")
gALL2ALL
setwd("~/Repositorios/SemilleroMSFS/Codigos")
library(ggplot2)
dfPuntajes = read.csv('agentes.csv')
head(dfPuntajes)
library(dplyr)
head(dfPuntajes)
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line()
p1
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
ylim(c(0,1)) +
geom_line()
p1
dfPuntajes = read.csv('agentes.csv')
head(dfPuntajes)
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
ylim(c(0,1)) +
geom_line()
p1
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0,1)) +
geom_line()
p1
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0,1)) +
p1
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0,1)) +
p1
head(df_summary)
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <-ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0,1)) +
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0,1))
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0,1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.9) +
ylim(c(0,1)) +
theme_bw()
p1
library(ggplot2)
library(Rmisc)
library(dplyr)
dfPuntajes = read.csv('agentes.csv')
head(dfPuntajes)
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line() +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.9) +
ylim(c(0,1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.9) +
ylim(c(0,1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.9) +
#  ylim(c(0,1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(0,1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(0.5,1.2)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(0,1)) +
theme_bw()
p1
head(dfPuntajes)
head(df_summary)
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(-0.1,1.1)) +
theme_bw()
p1
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Identificador, Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(-0.1,1.1)) +
theme_bw()
p1
dfPuntajes = read.csv('agentes.csv')
head(dfPuntajes)
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Identificador, Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
ylim(c(-0.1,1.1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
theme_bw()
p1
dfPuntajes = read.csv('agentes.csv')
head(dfPuntajes)
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Identificador, Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
#  geom_ribbon(aes(ymin = Asistencia - sd_RD,
#                  ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
#  geom_ribbon(aes(ymin = Asistencia - sd_RD,
#                  ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
labs(color = "Identificador") +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.7) +
#  geom_ribbon(aes(ymin = Asistencia - sd_RD,
#                  ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
labs(color = "Identificador") +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.9) +
#  geom_ribbon(aes(ymin = Asistencia - sd_RD,
#                  ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
labs(color = "Identificador") +
theme_bw()
p1
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia, group=Identificador, color=Identificador)) +
geom_line(size=0.9) +
#  geom_ribbon(aes(ymin = Asistencia - sd_RD,
#                  ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
labs(group = "Identificador") +
theme_bw()
p1
df_summary <- dfPuntajes %>% # the names of the new data frame and the data frame to be summarised
dplyr::group_by(Ronda) %>%   # the grouping variable
dplyr::summarise(Asistencia = mean(Estado, na.rm=TRUE),  # calculates the mean of each group
sd_RD = sd(Estado, na.rm=TRUE), # calculates the standard deviation of each group
n_RD = n()) # calculates the standard error of each group
head(df_summary)
p1 <- ggplot(data = df_summary, aes(x=Ronda, y=Asistencia)) +
geom_line(size=0.9) +
geom_ribbon(aes(ymin = Asistencia - sd_RD,
ymax = Asistencia + sd_RD), alpha = 0.2) +
#  ylim(c(-0.1,1.1)) +
labs(color = "Identificador") +
theme_bw()
p1
